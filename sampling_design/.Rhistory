library(gdistance)
library(tidyverse)
library(rgeos)
install.packages("rgeos")
install.packages("rgeos", repos="http://R-Forge.R-project.org")
library(rgeos)
library(elevatr)
install.packages("elevatr")
library(elevatr)
library(ggplot2)
library(tigris)
install.packages("tigris")
library(tigris)
install.packages("spocc")
library(raster)
library(viridis)
library(ggthemes)
install.packages(ggthemes)
install.packages("ggthemes")
library(ggthemes)
library(tidyverse)
states <- states()
se <- states %>%
subset(REGION == "3")
TN_NC <- se %>%     # Subsetting the data to Tennessee and North Carolina
subset(NAME %in% c("Tennessee", "North Carolina"))
Pj <- occ(query = "Plethodon jordani",                 # JRCS scientific name
from = "gbif",                               # limiting query to *the first* 1000 records
limit=1000,                                  # limiting query to *the first* 1000 records
has_coords = T)                              # limiting those 1000 records to those that have geo-referenced data
library(spocc)
Pj <- occ(query = "Plethodon jordani",                 # JRCS scientific name
from = "gbif",                               # limiting query to *the first* 1000 records
limit=1000,                                  # limiting query to *the first* 1000 records
has_coords = T)                              # limiting those 1000 records to those that have geo-referenced data
Pj_sp <- Pj$gbif$data$Plethodon_jordani %>%            # Grabbing the Darwin-core data from the spocc object
dplyr::select(longitude,                             # Keep locations and year, discard the rest
latitude,
year) %>%
dplyr::filter(year > 2000) %>%                       # Filter records to only those after year 2000
filter(!duplicated(round(longitude, 2),              # Remove duplicate records using rounded decimals (this removes points very near to one-another)
round(latitude, 2)) == TRUE) %>%  # >> See notes below about ^^
dplyr::mutate(lon = scale(longitude),                # Remove points far outside the cluster of occurrences
lat = scale(latitude)) %>%             # >> See notes below about ^^
dplyr::filter(!abs(lon)>2) %>%
dplyr::filter(!abs(lat)>2) %>%
dplyr::select(longitude,
latitude) %>%
SpatialPoints(proj4string = crs(se))
Pj$gbif$data$Plethodon_jordani
Pj$gbif$data$Plethodon_jordani %>%            # Grabbing the Darwin-core data from the spocc object
dplyr::select(longitude,                             # Keep locations and year, discard the rest
latitude,
year)
Pj$gbif$data$Plethodon_jordani %>%            # Grabbing the Darwin-core data from the spocc object
dplyr::select(longitude,                             # Keep locations and year, discard the rest
latitude,
year) %>%
dplyr::filter(year > 2000)
Pj$gbif$data$Plethodon_jordani %>%            # Grabbing the Darwin-core data from the spocc object
dplyr::select(longitude,                             # Keep locations and year, discard the rest
latitude,
year) %>%
dplyr::filter(year > 2000) %>%                       # Filter records to only those after year 2000
filter(!duplicated(round(longitude, 2),              # Remove duplicate records using rounded decimals (this removes points very near to one-another)
round(latitude, 2)) == TRUE)
Pj$gbif$data$Plethodon_jordani %>%            # Grabbing the Darwin-core data from the spocc object
dplyr::select(longitude,                             # Keep locations and year, discard the rest
latitude,
year) %>%
dplyr::filter(year > 2000) %>%                       # Filter records to only those after year 2000
filter(!duplicated(round(longitude, 2),              # Remove duplicate records using rounded decimals (this removes points very near to one-another)
round(latitude, 2)) == TRUE) %>%  # >> See notes below about ^^
dplyr::mutate(lon = scale(longitude),                # Remove points far outside the cluster of occurrences
lat = scale(latitude)) %>%             # >> See notes below about ^^
dplyr::filter(!abs(lon)>2) %>%
dplyr::filter(!abs(lat)>2) %>%
dplyr::select(longitude,
latitude)
SpatialPoints(proj4string = crs(se))
crs(se)
Pj_sp <- Pj$gbif$data$Plethodon_jordani %>%            # Grabbing the Darwin-core data from the spocc object
dplyr::select(longitude,                             # Keep locations and year, discard the rest
latitude,
year) %>%
dplyr::filter(year > 2000) %>%                       # Filter records to only those after year 2000
filter(!duplicated(round(longitude, 2),              # Remove duplicate records using rounded decimals (this removes points very near to one-another)
round(latitude, 2)) == TRUE) %>%  # >> See notes below about ^^
dplyr::mutate(lon = scale(longitude),                # Remove points far outside the cluster of occurrences
lat = scale(latitude)) %>%             # >> See notes below about ^^
dplyr::filter(!abs(lon)>2) %>%
dplyr::filter(!abs(lat)>2) %>%
dplyr::select(longitude,
latitude)
crs(Pj_sp)
crs(Pj_sp) <- crs(se)
SpatialPoints(Pj_sp, proj4string = crs(se))
class(Pj_sp)
Pj_sp
sf::st_as_sf(Pj_sp,
coords = c("longitude","latitude"),
crs = se)
crs(se)
sf::st_as_sf(Pj_sp,
coords = c("longitude","latitude"),
crs = 4269)
Pj_sp <-
sf::st_as_sf(Pj_sp,
coords = c("longitude","latitude"),
crs = 4269)
ggplot() + geom_polygon(data=se, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
coord_quickmap() + theme_map()
ggplot() + geom_polygon(data=se, aes(x=long, y=lat, group=group), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
coord_quickmap() + theme_map()
ggplot() + geom_polygon(data=se, aes(x=longitude, y=latitude, group=group), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
coord_quickmap() + theme_map()
se
colnames(se)
ggplot() +
geom_polygon(data = se, aes(x = INTPTLON, y = INTPTLAT, group = group), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
coord_quickmap() + theme_map()
ggplot() +
geom_polygon(data = se, aes(x = INTPTLON, y = INTPTLAT), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
coord_quickmap() + theme_map()
ggplot() +
geom_polygon(data = se, aes(x = INTPTLON, y = INTPTLAT), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x = INTPTLON, y = INTPTLAT), col="grey40", fill="light blue") +
coord_quickmap() + theme_map()
Pj_sp@coords
Pj_sp <- Pj$gbif$data$Plethodon_jordani %>%            # Grabbing the Darwin-core data from the spocc object
dplyr::select(longitude,                             # Keep locations and year, discard the rest
latitude,
year) %>%
dplyr::filter(year > 2000) %>%                       # Filter records to only those after year 2000
filter(!duplicated(round(longitude, 2),              # Remove duplicate records using rounded decimals (this removes points very near to one-another)
round(latitude, 2)) == TRUE) %>%  # >> See notes below about ^^
dplyr::mutate(lon = scale(longitude),                # Remove points far outside the cluster of occurrences
lat = scale(latitude)) %>%             # >> See notes below about ^^
dplyr::filter(!abs(lon)>2) %>%
dplyr::filter(!abs(lat)>2) %>%
dplyr::select(longitude,
latitude)
?SpatialPoints
Pj_sp <- SpatialPoints(coords = c(Pj_sp$longitude, Pj_sp$latitude), crs = 4269)
Pj_sp <- SpatialPoints(coords = c(Pj_sp$longitude, Pj_sp$latitude), proj4string = 4269)
Pj_sp <- SpatialPoints(coords = c(Pj_sp$longitude, Pj_sp$latitude), proj4string = se)
Pj_sp <- SpatialPoints(coords = c(Pj_sp$longitude, Pj_sp$latitude), proj4string = CRS(4269))
crs(se)
Pj_sp <- SpatialPoints(coords = c(Pj_sp$longitude, Pj_sp$latitude), proj4string = CRS("+init=epsg:4269"))
Pj_sp <- SpatialPoints(proj4string = CRS("+init=epsg:4269"))
Pj_sp <- SpatialPoints(coords = Pj_sp, proj4string = CRS("+init=epsg:4269"))
Pj_sp <- SpatialPoints(coords = Pj_sp, proj4string = CRS(4269))
Pj_sp <- SpatialPoints(coords = Pj_sp, proj4string = CRS(EPSG:4269))
Pj_sp <- SpatialPoints(coords = Pj_sp, proj4string = CRS("+init=epsg:4269"))
Pj_sp <- SpatialPoints(coords = Pj_sp, proj4string = CRS("+init=epsg:4269"))
Pj_coords <- Pj_sp@coords
Pj_coords <- Pj_sp@coords
Pj_chull <- chull(Pj_sp@coords)                           # Creating convex hull
Pj_chull_ends <- Pj_sp@coords[c(Pj_chull, Pj_chull[1]),]  # generate the end points of polygon.
Pj_poly <- SpatialPolygons(
list(Polygons(
list(Polygon(Pj_chull_ends)), ID=1)),
proj4string = crs(se))       # convert coords to SpatialPolygons
Pj_poly <- SpatialPolygons(
list(Polygons(
list(Polygon(Pj_chull_ends)), ID=1)),
proj4string = CRS("+init=epsg:4267"))       # convert coords to SpatialPolygons
Pj_poly <- SpatialPolygons(list(Polygons(list(Polygon(Pj_chull_ends)), ID=1)), proj4string = CRS("+init=epsg:4267"))       # convert coords to SpatialPolygons
states <- states()
se <- states %>%
subset(REGION == "3")
TN_NC <- se %>%     # Subsetting the data to Tennessee and North Carolina
subset(NAME %in% c("Tennessee", "North Carolina"))
Pj <- occ(query = "Plethodon jordani",                 # JRCS scientific name
from = "gbif",                               # limiting query to *the first* 1000 records
limit=1000,                                  # limiting query to *the first* 1000 records
has_coords = T)                              # limiting those 1000 records to those that have geo-referenced data
Pj_sp <- Pj$gbif$data$Plethodon_jordani %>%            # Grabbing the Darwin-core data from the spocc object
dplyr::select(longitude,                             # Keep locations and year, discard the rest
latitude,
year) %>%
dplyr::filter(year > 2000) %>%                       # Filter records to only those after year 2000
filter(!duplicated(round(longitude, 2),              # Remove duplicate records using rounded decimals (this removes points very near to one-another)
round(latitude, 2)) == TRUE) %>%  # >> See notes below about ^^
dplyr::mutate(lon = scale(longitude),                # Remove points far outside the cluster of occurrences
lat = scale(latitude)) %>%             # >> See notes below about ^^
dplyr::filter(!abs(lon)>2) %>%
dplyr::filter(!abs(lat)>2) %>%
dplyr::select(longitude,
latitude)
Pj_sp <- SpatialPoints(coords = Pj_sp, proj4string = CRS("+init=epsg:4269"))
Pj_coords <- Pj_sp@coords
Pj_chull <- chull(Pj_sp@coords)                           # Creating convex hull
Pj_chull_ends <- Pj_sp@coords[c(Pj_chull, Pj_chull[1]),]  # generate the end points of polygon.
Pj_poly <- SpatialPolygons(list(Polygons(list(Polygon(Pj_chull_ends)), ID=1)), proj4string = CRS("+init=epsg:4267"))       # convert coords to SpatialPolygons
Pj_poly_buff <- gBuffer(Pj_poly, width = 0.05, byid=T)
ggplot() +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="pink") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=longitude, y=latitude), size=0.01) +
coord_quickmap() + theme_map()
TN_NC
ggplot() +
#geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="pink") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=longitude, y=latitude), size=0.01) +
coord_quickmap() + theme_map()
ggplot() +
#geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_polygon(data = Pj_poly_buff, aes(x = long, y = lat, group = group), col="grey40", fill="pink") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=longitude, y=latitude), size=0.01) +
coord_quickmap() + theme_map()
elevation <- get_elev_raster(Pj_poly_buff, z = 8)         # This will find a DEM tile nearest to our polygon
plot(Pj_poly_buff)
class(Pj_poly_buff)
Pj_poly_buff
sf::st_to_sf(Pj_poly_buff)
library(sf)
sf::st_as_sf(Pj_poly_buff)
elevation <- get_elev_raster(sf::st_as_sf(Pj_poly_buff), z = 8)         # This will find a DEM tile nearest to our polygon
elv <- elevation %>% crop(Pj_poly_buff) %>% mask(Pj_poly_buff)
asp <- terrain(elv, opt = "aspect", neighbors = 8)
ggplot(as.data.frame(asp, xy=T)) +
geom_raster(aes(x=x, y=y, fill=aspect)) +
scale_fill_continuous(na.value=NA) +
theme_map() +
theme(legend.position = "right")
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),]       # Take 5 random locations
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
Pj_chull_ends <- Pj_sp@coords[c(Pj_chull, Pj_chull[1]),]  # generate the end points of polygon.
Pj_poly <- SpatialPolygons(list(Polygons(list(Polygon(Pj_chull_ends)), ID=1)), proj4string = CRS("+init=epsg:4269"))       # convert coords to SpatialPolygons
Pj_poly_buff <- gBuffer(Pj_poly, width = 0.05, byid=T)
ggplot() +
#geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_polygon(data = Pj_poly_buff, aes(x = long, y = lat, group = group), col="grey40", fill="pink") +
geom_point(data = as.data.frame(Pj_sp@coords), aes(x = longitude, y=latitude), size = 0.01) +
coord_quickmap() +
theme_map()
elevation <- get_elev_raster(sf::st_as_sf(Pj_poly_buff), z = 8)         # This will find a DEM tile nearest to our polygon
elv <- elevation %>% crop(Pj_poly_buff) %>% mask(Pj_poly_buff)
asp <- terrain(elv, opt = "aspect", neighbors = 8)
ggplot(as.data.frame(asp, xy=T)) +
geom_raster(aes(x=x, y=y, fill=aspect)) +
scale_fill_continuous(na.value=NA) +
theme_map() +
theme(legend.position = "right")
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),]       # Take 5 random locations
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
Pj_combn <- combn(nrow(Pj_sample),2) %>%
t() %>%
as.matrix()
asp_tr <- transition(asp, transitionFunction = mean, 4) %>%
geoCorrection(type="c",multpl=F)
passages <- list()                                                     # Create a list to store the passage probability rasters in
system.time(                                                           # Keep track of how long this takes
for (i in 1:nrow(Pj_combn)) {
locations <- SpatialPoints(rbind(Pj_sample[Pj_combn[i,1],1:2],     # create origin points
Pj_sample[Pj_combn[i,2],1:2]),   # create destination (or goal) points, to traverse
crs(se))
passages[[i]] <- passage(asp_tr,                                   # run the passage function
origin=locations[1],                 # set orgin point
goal=locations[2],                   # set goal point
theta = 0.00001)                             # set theta (tuning parameter, see notes below)
print(paste((i/nrow(Pj_combn))*100, "% complete"))
}
)
passages <- list()                                                     # Create a list to store the passage probability rasters in
passages <- list()                                                     # Create a list to store the passage probability rasters in
system.time(                                                           # Keep track of how long this takes
for (i in 1:nrow(Pj_combn)) {
locations <- SpatialPoints(rbind(Pj_sample[Pj_combn[i,1],1:2],     # create origin points
Pj_sample[Pj_combn[i,2],1:2]),   # create destination (or goal) points, to traverse
proj4string = CRS("+init=epsg:4269"))
passages[[i]] <- passage(asp_tr,                                   # run the passage function
origin=locations[1],                 # set orgin point
goal=locations[2],                   # set goal point
theta = 0.00001)                             # set theta (tuning parameter, see notes below)
print(paste((i/nrow(Pj_combn))*100, "% complete"))
}
)
passages <- stack(passages)                                            # create a raster stack of all the passage probabilities
passages_overlay <- sum(passages)/nrow(Pj_combn)                       # calculate average
colors <- c("grey60", viridis_pal(option="plasma", begin = 0.3, end = 1)(20))
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_gradientn(colors = colors, na.value = NA) +
theme_map() +   theme(legend.position = "right")
Pj_sp
library(gdistance)
library(tidyverse)
library(rgeos)
library(elevatr)
library(ggplot2)
library(tigris)
library(spocc)
library(raster)
library(viridis)
library(ggthemes)
library(tidyverse)
states <- states()
se <- states %>%
subset(REGION == "3")
plot(se)
plot(se$REGION)
plot(se[1])
TN_NC <- se %>%     # Subsetting the data to Tennessee and North Carolina
subset(NAME %in% c("Tennessee", "North Carolina"))
plot(TN_NC)
plot(TN_NC[1])
class(TN_NC)
Pj <- occ(query = "Plethodon jordani",                 # JRCS scientific name
from = "gbif",                               # limiting query to *the first* 1000 records
limit=1000,                                  # limiting query to *the first* 1000 records
has_coords = T)                              # limiting those 1000 records to those that have geo-referenced data
Pj_sp <- Pj$gbif$data$Plethodon_jordani %>%            # Grabbing the Darwin-core data from the spocc object
dplyr::select(longitude,                             # Keep locations and year, discard the rest
latitude,
year) %>%
dplyr::filter(year > 2000) %>%                       # Filter records to only those after year 2000
filter(!duplicated(round(longitude, 2),              # Remove duplicate records using rounded decimals (this removes points very near to one-another)
round(latitude, 2)) == TRUE) %>%  # >> See notes below about ^^
dplyr::mutate(lon = scale(longitude),                # Remove points far outside the cluster of occurrences
lat = scale(latitude)) %>%             # >> See notes below about ^^
dplyr::filter(!abs(lon)>2) %>%
dplyr::filter(!abs(lat)>2) %>%
dplyr::select(longitude,
latitude)
Pj_sp <- SpatialPoints(coords = Pj_sp, proj4string = CRS("+init=epsg:4269"))
Pj_sp
Pj_coords <- Pj_sp@coords
Pj_chull <- chull(Pj_sp@coords)                           # Creating convex hull
Pj_chull_ends <- Pj_sp@coords[c(Pj_chull, Pj_chull[1]),]  # generate the end points of polygon.
Pj_poly <- SpatialPolygons(list(Polygons(list(Polygon(Pj_chull_ends)), ID=1)), proj4string = CRS("+init=epsg:4269"))       # convert coords to SpatialPolygons
Pj_poly_buff <- gBuffer(Pj_poly, width = 0.05, byid=T)
ggplot() +
#geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_polygon(data = Pj_poly_buff, aes(x = long, y = lat, group = group), col="grey40", fill="pink") +
geom_point(data = as.data.frame(Pj_sp@coords), aes(x = longitude, y=latitude), size = 0.01) +
coord_quickmap() +
theme_map()
ggplot() +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
#geom_polygon(data = Pj_poly_buff, aes(x = long, y = lat, group = group), col="grey40", fill="pink") +
#geom_point(data = as.data.frame(Pj_sp@coords), aes(x = longitude, y=latitude), size = 0.01) +
coord_quickmap() +
theme_map()
class(Pj_poly_buff)
TN_NC <- sf::st_as_sf(TN_NC)
ggplot() +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
#geom_polygon(data = Pj_poly_buff, aes(x = long, y = lat, group = group), col="grey40", fill="pink") +
#geom_point(data = as.data.frame(Pj_sp@coords), aes(x = longitude, y=latitude), size = 0.01) +
coord_quickmap() +
theme_map()
TN_NC
class(TN_NC)
TN_NC <- se %>%     # Subsetting the data to Tennessee and North Carolina
subset(NAME %in% c("Tennessee", "North Carolina"))
class(TN_NC)
class(TN_NC)
ggplot() +
geom_polygon(data=TN_NC[1], aes(x=long, y=lat), col="grey40", fill="light blue") +
#geom_polygon(data = Pj_poly_buff, aes(x = long, y = lat, group = group), col="grey40", fill="pink") +
#geom_point(data = as.data.frame(Pj_sp@coords), aes(x = longitude, y=latitude), size = 0.01) +
coord_quickmap() +
theme_map()
TN_NC[1]
?gdistance
library(gdistance)
?passage
?sf::st_transform
install.packages("rJavaEnc")
install.packages("rJavaEnv")
library(rJavaEnv)
Sys.getenv("JAVA_HOME")
install.packages("rJava")
.jinit()
setwd("C:/Users/a1235304/Dropbox/BCI-minerals/sampling_design")
# load nwshelf shape
nw_shape <- st_read("./nw-shelf/NWShelf.shp", quiet = TRUE)
require(dssduoa)
require(sf)
require(tidyverse)
require(spsurvey)
require(mapview)
require(leaflet)
require(leaflet.minicharts)
require(leaflet.extras)
require(raster)
# load nwshelf shape
nw_shape <- st_read("./nw-shelf/NWShelf.shp", quiet = TRUE)
sf::st_sample(nw_shape,size = 100000)
plot(sf::st_sample(nw_shape,size = 100000))
plot(sf::st_sample(nw_shape,size = 1000))
plot(sf::st_sample(nw_shape,size = 100))
plot(sf::st_sample(nw_shape,size = 100), pch = 19)
mapview::mapview(sf::st_sample(nw_shape,size = 100), pch = 19)
mapview::mapview(sf::st_sample(nw_shape,size = 100))
plot(sf::st_sample(nw_shape,size = 100))
plot(sf::st_sample(nw_shape,size = 100), cex = 1)
plot(sf::st_sample(nw_shape,size = 100), cex = 10.5)
plot(sf::st_sample(nw_shape,size = 100), cex = 105)
plot(sf::st_sample(nw_shape,size = 100), cex = 0.5)
